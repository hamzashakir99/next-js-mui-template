"use client";
import React, { useState, useMemo, createContext } from "react";
import { Inter } from "next/font/google";
import { PaletteMode } from "@mui/material";
import { createTheme } from "@mui/material/styles";
import { ThemeProvider, CssBaseline } from "@mui/material";
import { Provider } from "react-redux";

import "./globals.css";
import "react-spring-bottom-sheet/dist/style.css";

import { getDesignTokens } from "@/theme/themes";
import { Sheet } from "@/components/index";
import { store } from "@/redux/store";

export const ColorModeContext = createContext({ toggleColorMode: () => {} });
const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [mode, setMode] = useState<PaletteMode>("light");

  const colorMode = useMemo(
    () => ({
      // The dark mode switch would invoke this method
      toggleColorMode: () => {
        setMode((prevMode: PaletteMode) =>
          prevMode === "light" ? "dark" : "light"
        );
      },
    }),
    []
  );
  const theme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);

  // Update the theme only if the mode changes
  return (
    <html lang="en">
      <Provider store={store}>
        <ColorModeContext.Provider value={colorMode}>
          <ThemeProvider theme={theme}>
            <CssBaseline />
            <body className={inter.className}>
              <Sheet action="app-setting" />
              {children}
            </body>
          </ThemeProvider>
        </ColorModeContext.Provider>
      </Provider>
    </html>
  );
}
